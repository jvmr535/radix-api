{
  "service": {
    "service": "radix-backend",
    "serviceObject": {
      "name": "radix-backend"
    },
    "provider": {
      "name": "aws",
      "runtime": "nodejs20.x",
      "region": "us-east-1",
      "deploymentBucket": "radix-backend-artifacts-prd",
      "apiGateway": {
        "resourcePolicy": [
          {
            "Effect": "Allow",
            "Principal": "*",
            "Action": [
              "execute-api:Invoke"
            ],
            "Resource": [
              "*"
            ]
          }
        ]
      },
      "environment": {
        "NODE_ENV": "local",
        "ENCRYPTION_KEY": "Tf7XE1rr2LAJpWt",
        "JWT_SECRET_KEY": "juvbaLmwnnEXbVk",
        "SEED_USERNAME": "root@mail.com",
        "SEED_PASSWORD": "Root@1234"
      },
      "stage": "dev",
      "versionFunctions": true,
      "deploymentBucketObject": {
        "name": "radix-backend-artifacts-prd"
      },
      "compiledCloudFormationTemplate": {
        "AWSTemplateFormatVersion": "2010-09-09",
        "Description": "The AWS CloudFormation template for this Serverless application",
        "Resources": {
          "MainLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/radix-backend-prd-main"
            }
          },
          "MainLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "radix-backend-artifacts-prd",
                "S3Key": "serverless/radix-backend/prd/1722631285453-2024-08-02T20:41:25.453Z/main.zip"
              },
              "Handler": "dist/main.handler",
              "Runtime": "nodejs20.x",
              "FunctionName": "radix-backend-prd-main",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "NODE_ENV": "local",
                  "ENCRYPTION_KEY": "Tf7XE1rr2LAJpWt",
                  "JWT_SECRET_KEY": "juvbaLmwnnEXbVk",
                  "SEED_USERNAME": "root@mail.com",
                  "SEED_PASSWORD": "Root@1234"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "RadixBackendLambdaRole",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "MainLogGroup",
              "RadixBackendLambdaRole"
            ]
          },
          "MainLambdaVersionzeCudDvKiBzPwWfM4eoZH4ugrbmJMbxnZOGNV16bdY": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "MainLambdaFunction"
              },
              "CodeSha256": "XWSjVYgFFlaS1JPf5JPMzcSlY57gFZkeNmAdgsKoAg8="
            }
          },
          "ApiGatewayRestApi": {
            "Type": "AWS::ApiGateway::RestApi",
            "Properties": {
              "Name": "prd-radix-backend",
              "EndpointConfiguration": {
                "Types": [
                  "EDGE"
                ]
              },
              "Policy": {
                "Version": "2012-10-17",
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Principal": "*",
                    "Action": [
                      "execute-api:Invoke"
                    ],
                    "Resource": [
                      "*"
                    ]
                  }
                ]
              }
            }
          },
          "ApiGatewayResourceProxyVar": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "{proxy+}",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,DELETE,GET,HEAD,PATCH,POST,PUT'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodProxyVarOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,DELETE,GET,HEAD,PATCH,POST,PUT'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceProxyVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodAny": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "ANY",
              "RequestParameters": {},
              "ResourceId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "MainLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "MainLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodProxyVarAny": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "ANY",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceProxyVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "MainLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "MainLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayDeployment1722631276998": {
            "Type": "AWS::ApiGateway::Deployment",
            "Properties": {
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "StageName": "prd"
            },
            "DependsOn": [
              "ApiGatewayMethodOptions",
              "ApiGatewayMethodProxyVarOptions",
              "ApiGatewayMethodAny",
              "ApiGatewayMethodProxyVarAny"
            ]
          },
          "MainLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "MainLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "RadixBackendLambdaRole": {
            "Type": "AWS::IAM::Role",
            "Properties": {
              "RoleName": "RadixBackendLambdaRole-prd",
              "AssumeRolePolicyDocument": {
                "Version": "2012-10-17",
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Principal": {
                      "Service": "lambda.amazonaws.com"
                    },
                    "Action": "sts:AssumeRole"
                  }
                ]
              },
              "ManagedPolicyArns": [
                "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
              ],
              "Policies": [
                {
                  "PolicyName": "RadixBackendLambdaPolicy-prd",
                  "PolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                      {
                        "Effect": "Allow",
                        "Action": [
                          "dynamodb:GetItem",
                          "dynamodb:PutItem",
                          "dynamodb:UpdateItem",
                          "dynamodb:Scan",
                          "dynamodb:Query",
                          "dynamodb:BatchGetItem",
                          "dynamodb:BatchWriteItem",
                          "dynamodb:DeleteItem"
                        ],
                        "Resource": [
                          {
                            "Fn::Join": [
                              "",
                              [
                                "arn:aws:dynamodb:",
                                {
                                  "Ref": "AWS::Region"
                                },
                                ":",
                                {
                                  "Ref": "AWS::AccountId"
                                },
                                ":table/radix-sensors-data"
                              ]
                            ]
                          }
                        ]
                      },
                      {
                        "Effect": "Allow",
                        "Action": [
                          "s3:*"
                        ],
                        "Resource": [
                          "arn:aws:s3:::radix-backend-prd",
                          "arn:aws:s3:::radix-backend-prd/*"
                        ]
                      }
                    ]
                  }
                }
              ]
            }
          },
          "RadixSensorsData": {
            "Type": "AWS::DynamoDB::Table",
            "Properties": {
              "TableName": "radix-sensors-data",
              "AttributeDefinitions": [
                {
                  "AttributeName": "EquipmentId",
                  "AttributeType": "S"
                },
                {
                  "AttributeName": "Timestamp",
                  "AttributeType": "S"
                }
              ],
              "KeySchema": [
                {
                  "AttributeName": "EquipmentId",
                  "KeyType": "HASH"
                }
              ],
              "GlobalSecondaryIndexes": [
                {
                  "IndexName": "TimestampIndex",
                  "KeySchema": [
                    {
                      "AttributeName": "Timestamp",
                      "KeyType": "HASH"
                    }
                  ],
                  "Projection": {
                    "ProjectionType": "ALL"
                  }
                }
              ],
              "BillingMode": "PAY_PER_REQUEST"
            }
          }
        },
        "Outputs": {
          "ServerlessDeploymentBucketName": {
            "Value": "radix-backend-artifacts-prd",
            "Export": {
              "Name": "sls-radix-backend-prd-ServerlessDeploymentBucketName"
            }
          },
          "MainLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "MainLambdaVersionzeCudDvKiBzPwWfM4eoZH4ugrbmJMbxnZOGNV16bdY"
            },
            "Export": {
              "Name": "sls-radix-backend-prd-MainLambdaFunctionQualifiedArn"
            }
          },
          "ServiceEndpoint": {
            "Description": "URL of the service endpoint",
            "Value": {
              "Fn::Join": [
                "",
                [
                  "https://",
                  {
                    "Ref": "ApiGatewayRestApi"
                  },
                  ".execute-api.",
                  {
                    "Ref": "AWS::Region"
                  },
                  ".",
                  {
                    "Ref": "AWS::URLSuffix"
                  },
                  "/prd"
                ]
              ]
            },
            "Export": {
              "Name": "sls-radix-backend-prd-ServiceEndpoint"
            }
          }
        }
      },
      "vpc": {}
    },
    "custom": {
      "serviceNamePrefix": "radix-backend-prd",
      "deploymentStage": "prd",
      "secrets": {
        "NODE_ENV": "local",
        "ENCRYPTION_KEY": "Tf7XE1rr2LAJpWt",
        "JWT_SECRET_KEY": "juvbaLmwnnEXbVk",
        "SEED_USERNAME": "root@mail.com",
        "SEED_PASSWORD": "Root@1234"
      }
    },
    "plugins": [
      "serverless-deployment-bucket"
    ],
    "pluginsData": {},
    "functions": {
      "main": {
        "handler": "dist/main.handler",
        "role": "RadixBackendLambdaRole",
        "package": {
          "individually": true,
          "artifact": "/home/jvmr535/workspace/personal/radix-challenge/api/.serverless/main.zip"
        },
        "events": [
          {
            "http": {
              "method": "any",
              "path": "",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "ANY"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent",
                  "X-Amzn-Trace-Id"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          },
          {
            "http": {
              "method": "any",
              "path": "{proxy+}",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "ANY"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent",
                  "X-Amzn-Trace-Id"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "radix-backend-prd-main",
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs20.x",
        "vpc": {},
        "versionLogicalId": "MainLambdaVersionzeCudDvKiBzPwWfM4eoZH4ugrbmJMbxnZOGNV16bdY"
      }
    },
    "resources": {
      "Resources": {
        "RadixBackendLambdaRole": {
          "Type": "AWS::IAM::Role",
          "Properties": {
            "RoleName": "RadixBackendLambdaRole-prd",
            "AssumeRolePolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Principal": {
                    "Service": "lambda.amazonaws.com"
                  },
                  "Action": "sts:AssumeRole"
                }
              ]
            },
            "ManagedPolicyArns": [
              "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
            ],
            "Policies": [
              {
                "PolicyName": "RadixBackendLambdaPolicy-prd",
                "PolicyDocument": {
                  "Version": "2012-10-17",
                  "Statement": [
                    {
                      "Effect": "Allow",
                      "Action": [
                        "dynamodb:GetItem",
                        "dynamodb:PutItem",
                        "dynamodb:UpdateItem",
                        "dynamodb:Scan",
                        "dynamodb:Query",
                        "dynamodb:BatchGetItem",
                        "dynamodb:BatchWriteItem",
                        "dynamodb:DeleteItem"
                      ],
                      "Resource": [
                        {
                          "Fn::Join": [
                            "",
                            [
                              "arn:aws:dynamodb:",
                              {
                                "Ref": "AWS::Region"
                              },
                              ":",
                              {
                                "Ref": "AWS::AccountId"
                              },
                              ":table/radix-sensors-data"
                            ]
                          ]
                        }
                      ]
                    },
                    {
                      "Effect": "Allow",
                      "Action": [
                        "s3:*"
                      ],
                      "Resource": [
                        "arn:aws:s3:::radix-backend-prd",
                        "arn:aws:s3:::radix-backend-prd/*"
                      ]
                    }
                  ]
                }
              }
            ]
          }
        },
        "RadixSensorsData": {
          "Type": "AWS::DynamoDB::Table",
          "Properties": {
            "TableName": "radix-sensors-data",
            "AttributeDefinitions": [
              {
                "AttributeName": "EquipmentId",
                "AttributeType": "S"
              },
              {
                "AttributeName": "Timestamp",
                "AttributeType": "S"
              }
            ],
            "KeySchema": [
              {
                "AttributeName": "EquipmentId",
                "KeyType": "HASH"
              }
            ],
            "GlobalSecondaryIndexes": [
              {
                "IndexName": "TimestampIndex",
                "KeySchema": [
                  {
                    "AttributeName": "Timestamp",
                    "KeyType": "HASH"
                  }
                ],
                "Projection": {
                  "ProjectionType": "ALL"
                }
              }
            ],
            "BillingMode": "PAY_PER_REQUEST"
          }
        }
      },
      "Outputs": {}
    },
    "configValidationMode": "warn",
    "serviceFilename": "serverless.yml",
    "initialServerlessConfig": {
      "service": "radix-backend",
      "plugins": {
        "$ref": "$[\"service\"][\"plugins\"]"
      },
      "frameworkVersion": "3",
      "custom": {
        "$ref": "$[\"service\"][\"custom\"]"
      },
      "provider": {
        "$ref": "$[\"service\"][\"provider\"]"
      },
      "package": {
        "patterns": [
          "dist/**",
          "package.json",
          "node_modules",
          "!node_modules/aws-sdk/**",
          "!node_modules/@types/**",
          "!node_modules/*/@types/*",
          "!node_modules/*/esm-browser/*",
          "!node_modules/typescript/**",
          "!node_modules/typeorm/browser/**",
          "!node_modules/*/.d.ts",
          "!node_modules/*/.md",
          "!node_modules/*/.map"
        ],
        "artifactsS3KeyDirname": "serverless/radix-backend/prd/code-artifacts",
        "deploymentBucket": "radix-backend-artifacts-prd",
        "artifactDirectoryName": "serverless/radix-backend/prd/1722631285453-2024-08-02T20:41:25.453Z"
      },
      "functions": {
        "$ref": "$[\"service\"][\"functions\"]"
      },
      "resources": {
        "$ref": "$[\"service\"][\"resources\"]"
      }
    },
    "layers": {},
    "isDashboardMonitoringPreconfigured": false
  },
  "package": {
    "artifactDirectoryName": "serverless/radix-backend/prd/1722631285453-2024-08-02T20:41:25.453Z",
    "artifact": ""
  }
}